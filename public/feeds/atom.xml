<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://daniel.feldroy.com/</id>
    <title>Daniel Roy Greenfeld</title>
    <updated>2024-06-11T17:05:52.638Z</updated>
    <generator>Next.js using Feed for Node.js</generator>
    <author>
        <name>Daniel Roy Greenfeld</name>
        <email>daniel@feldroy.com</email>
        <uri>https://daniel.feldroy.com</uri>
    </author>
    <link rel="alternate" href="https://daniel.feldroy.com"/>
    <subtitle>Inside the head of Daniel Roy Greenfeld</subtitle>
    <logo>https://daniel.feldroy.com/images/pydanny-cartwheel.png</logo>
    <icon>https://daniel.feldroy.com/favicon.ico</icon>
    <rights>All rights reserved 2024, Daniel Roy Greenfeld</rights>
    <entry>
        <title type="html"><![CDATA[TIL: Passing exceptions as arguments in Python]]></title>
        <id>https://daniel.feldroy.com/posts/til-2024-06-passing-exceptions-as-arguments-in-python</id>
        <link href="https://daniel.feldroy.com/posts/til-2024-06-passing-exceptions-as-arguments-in-python"/>
        <updated>2024-06-07T10:13:05.553Z</updated>
        <summary type="html"><![CDATA[Mypy needs an extra identifier to not choke on an exception passed as an argument.]]></summary>
        <content type="html"><![CDATA[<p><em>Mypy needs an extra identifier to not choke on an exception passed as an argument.</em></p>
<p>This will throw a mypy error:</p>
<pre><code class="language-python"># code.py
class MyException(Exception):
    pass


def myfunc(custom_exception: Exception) -> None:
    try:
        print('Test')
    except custom_exception:
        print('error)

myfunc(MyException)
</code></pre>
<p>The error mypy will throw looks something like this:</p>
<pre><code class="language-bash">$ mypy code.py

code.py:6: error: Exception type must be derived from BaseException (or be a tuple of exception classes)  [misc]
code.py:9: error: Argument 1 to "custom_exception" has incompatible type "type[MyException]"; expected "Exception"  [arg-type]
Found 2 errors in 1 file (checked 1 source file)
</code></pre>
<p>The solution is to use <code>typing.Type</code>:</p>
<pre><code class="language-python"># code.py
from typing import Type


class MyException(Exception):
    pass


def myfunc(custom_exception: Type[Exception]) -> None:
    try:
        print('Test')
    except custom_exception:
        print('error)

myfunc(MyException)
</code></pre>
]]></content>
        <author>
            <name>Daniel Roy Greenfeld</name>
            <email>daniel@feldroy.com</email>
            <uri>https://daniel.feldroy.com</uri>
        </author>
        <category term="TIL"/>
        <contributor>
            <name>Daniel Roy Greenfeld</name>
            <email>daniel@feldroy.com</email>
            <uri>https://daniel.feldroy.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[TIL: Renaming git branches]]></title>
        <id>https://daniel.feldroy.com/posts/til-2024-06-renaming-git-branches</id>
        <link href="https://daniel.feldroy.com/posts/til-2024-06-renaming-git-branches"/>
        <updated>2024-06-04T08:55:47.055Z</updated>
        <summary type="html"><![CDATA[Sometimes branches evolve into things that don't match their names.]]></summary>
        <content type="html"><![CDATA[<p><em>Sometimes branches evolve into things that don't match their names.</em></p>
<p>To rename the current branch:</p>
<pre><code>git branch -m NEWNAME
</code></pre>
<p>To rename a branch while pointed to any branch:</p>
<pre><code>git branch -m OLDNAME NEWNAME
</code></pre>
<p>To push the local branch and reset the upstream branch:</p>
<pre><code>git push origin -u NEWNAME
</code></pre>
<p>To cleanup the old branch:</p>
<pre><code>git push origin --delete OLDNAME
</code></pre>
<hr>
<p>Note: The source of this is this <a href="https://stackoverflow.com/questions/6591213/how-can-i-rename-a-local-git-branch">Stack Overflow post</a>. I wrote this TIL because I look this up about once a week, so decided to add it to the "bookmark" system that is my blog. Also, the use of <code>&#x3C;brackets></code> there for <code>REPLACE_THIS</code> content is unfortunate as it doesn't work well with the options keys.</p>
]]></content>
        <author>
            <name>Daniel Roy Greenfeld</name>
            <email>daniel@feldroy.com</email>
            <uri>https://daniel.feldroy.com</uri>
        </author>
        <category term="TIL"/>
        <category term="howto"/>
        <category term="git"/>
        <contributor>
            <name>Daniel Roy Greenfeld</name>
            <email>daniel@feldroy.com</email>
            <uri>https://daniel.feldroy.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rapidly creating smoke tests for Django views]]></title>
        <id>https://daniel.feldroy.com/posts/2024-05-rapidly-creating-smoke-tests-for-django-views</id>
        <link href="https://daniel.feldroy.com/posts/2024-05-rapidly-creating-smoke-tests-for-django-views"/>
        <updated>2024-05-25T11:42:48.161Z</updated>
        <summary type="html"><![CDATA[A management command for quickly generating tests based off Django's URL routing mechanism.]]></summary>
        <content type="html"><![CDATA[<p><em>A management command for quickly generating tests based off Django's URL routing mechanism.</em></p>
<p>Recently <a href="https://lincolnloop.com/about/peter-baumgartner/">Peter Baumgartner</a> of <a href="https://lincolnloop.com/">Lincoln Loop</a> wrote a <a href="https://www.linkedin.com/posts/pbaumgartner_ever-pick-up-a-legacy-project-that-has-activity-7186794287362183168-Bpcw">fantastic article</a> about the technique of writing smoke tests for Django views. Go read it, Peter provides really good justification for these smoke tests, especially for taking on legacy project without tests. Heck, the reason why I'm writing this post is so I have it in the bookmark service that is my blog.</p>
<p>Inspired as I was by Peter's article, I wrote a little management command to help build out smoke tests quickly. It's not perfect, and chances are you'll need to modify the results for the tests to be accurate. Certainly you'll need to add filtering like what I did with the <code>admin</code> to account for third-party packages that already have tests. Nevertheless, I've found it a useful tool for writing out smoke tests quickly.</p>
<p>In this example, it generates smoke tests to be called by <code>pytest</code> via <a href="https://pypi.org/project/pytest-django/">pytest-django</a>. It can be modified to work with standard Django unit tests.</p>
<pre><code class="language-python"># myapp/management/commands/make_smoke_tests.py
from django.core.management.base import BaseCommand
from django.urls import get_resolver


class Command(BaseCommand):
    help = 'Generates smoke tests for projects.'

    def handle(self, *args, **options):
        urlconf = get_resolver(None)
        self.generate_smoke_tests(urlconf)

    def generate_smoke_tests(self, urlconf, prefix=''):
        views = []
        for pattern in urlconf.url_patterns:
            if hasattr(pattern, 'app_name') and pattern.app_name == 'admin':
                continue
            if hasattr(pattern, 'name'):
                self.stdout.write(f"def test_{pattern.name}(client):")
                self.stdout.write(f'    response = client.get("/{pattern.pattern}/")')
                self.stdout.write('    assert response.status_code == 200')
                self.stdout.write('')
            if hasattr(pattern, 'url_patterns'):
                more_views = self.generate_smoke_tests(pattern, prefix + pattern.pattern.regex.pattern)
                views.extend(more_views)
        return views
</code></pre>
<p>Writing output to the terminal:</p>
<pre><code class="language-bash">./manage.py make_smoke_tests
</code></pre>
<p>Writing output to a file on OSX and Linux:</p>
<pre><code class="language-bash">./manage.py make_smoke_tests > tests/test_smoke.py
</code></pre>
<p>Try it and tell me what you think!</p>
<h1>Update May 25, 2024</h1>
<p><a href="https://github.com/aitoehigie">Ejay Aito</a> aka <a href="https://x.com/pystar">pystar</a> made improvements which you can see <a href="https://gist.github.com/aitoehigie/5bff431082b67f52e993465334422e6d">here</a>. He added the features listed below. Check out his work!</p>
<ol>
<li>added an argument for the output file path. If no output file is specified, it defaults to <code>smoke_tests.py</code>.</li>
<li>The script now properly handles URL parameters by extracting them with a regex and replacing them with sample values.</li>
<li>Tests can also be generated for POST, PUT, and DELETE methods.</li>
</ol>
]]></content>
        <author>
            <name>Daniel Roy Greenfeld</name>
            <email>daniel@feldroy.com</email>
            <uri>https://daniel.feldroy.com</uri>
        </author>
        <category term="Django"/>
        <category term="Python"/>
        <category term="howto"/>
        <category term="testing"/>
        <contributor>
            <name>Daniel Roy Greenfeld</name>
            <email>daniel@feldroy.com</email>
            <uri>https://daniel.feldroy.com</uri>
        </contributor>
    </entry>
</feed>