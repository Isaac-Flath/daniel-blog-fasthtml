<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://daniel.feldroy.com</id>
  <title>Inside the head of Daniel Roy Greenfeld</title>
  <updated>2024-08-04T21:38:05.739241+00:00</updated>
  <author>
    <name>Daniel Roy Greenfeld</name>
    <email>daniel@feldroy.com</email>
    <uri>https://daniel.feldroy.com</uri>
  </author>
  <link href="https://daniel.feldroy.com" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <logo>https://daniel.feldroy.com/images/pydanny-cartwheel.png</logo>
  <rights>All rights reserved 2024, Daniel Roy Greenfeld</rights>
  <entry>
    <id>til-2024-06-renaming-git-branches</id>
    <title>TIL: Renaming git branches</title>
    <updated>2024-08-04T21:38:06.047866+00:00</updated>
    <author>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </author>
    <content type="CDATA"><![CDATA[<p><em>Sometimes branches evolve into things that don't match their names.</em></p>
<p>To rename the current branch:</p>
<div class="codehilite"><pre><span></span><code>git branch -m NEWNAME
</code></pre></div>

<p>To rename a branch while pointed to any branch:</p>
<div class="codehilite"><pre><span></span><code>git branch -m OLDNAME NEWNAME
</code></pre></div>

<p>To push the local branch and reset the upstream branch:</p>
<div class="codehilite"><pre><span></span><code>git push origin -u NEWNAME
</code></pre></div>

<p>To cleanup the old branch:</p>
<div class="codehilite"><pre><span></span><code>git push origin --delete OLDNAME
</code></pre></div>]]></content>
    <link href="til-2024-06-renaming-git-branches"/>
    <summary>Sometimes branches evolve into things that don't match their names.</summary>
    <category term="TIL"/>
    <category term="howto"/>
    <category term="git"/>
    <contributor>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </contributor>
    <published>2024-06-04T09:55:47.055467+00:00</published>
  </entry>
  <entry>
    <id>til-2024-06-passing-exceptions-as-arguments-in-python</id>
    <title>TIL: Passing exceptions as arguments in Python</title>
    <updated>2024-08-04T21:38:06.026309+00:00</updated>
    <author>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </author>
    <content type="CDATA"><![CDATA[<p><em>Mypy needs an extra identifier to not choke on an exception passed as an argument.</em></p>
<p>This will throw a mypy error:</p>
<div class="codehilite"><pre><span></span><code><span class="c1"># code.py</span>
<span class="k">class</span> <span class="nc">MyException</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">custom_exception</span><span class="p">:</span> <span class="ne">Exception</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">custom_exception</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;error)</span>

<span class="n">myfunc</span><span class="p">(</span><span class="n">MyException</span><span class="p">)</span>
</code></pre></div>

<p>The error mypy will throw looks something like this:</p>
<div class="codehilite"><pre><span></span><code>$<span class="w"> </span>mypy<span class="w"> </span>code.py

code.py:6:<span class="w"> </span>error:<span class="w"> </span>Exception<span class="w"> </span><span class="nb">type</span><span class="w"> </span>must<span class="w"> </span>be<span class="w"> </span>derived<span class="w"> </span>from<span class="w"> </span>BaseException<span class="w"> </span><span class="o">(</span>or<span class="w"> </span>be<span class="w"> </span>a<span class="w"> </span>tuple<span class="w"> </span>of<span class="w"> </span>exception<span class="w"> </span>classes<span class="o">)</span><span class="w">  </span><span class="o">[</span>misc<span class="o">]</span>
code.py:9:<span class="w"> </span>error:<span class="w"> </span>Argument<span class="w"> </span><span class="m">1</span><span class="w"> </span>to<span class="w"> </span><span class="s2">&quot;custom_exception&quot;</span><span class="w"> </span>has<span class="w"> </span>incompatible<span class="w"> </span><span class="nb">type</span><span class="w"> </span><span class="s2">&quot;type[MyException]&quot;</span><span class="p">;</span><span class="w"> </span>expected<span class="w"> </span><span class="s2">&quot;Exception&quot;</span><span class="w">  </span><span class="o">[</span>arg-type<span class="o">]</span>
Found<span class="w"> </span><span class="m">2</span><span class="w"> </span>errors<span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="w"> </span>file<span class="w"> </span><span class="o">(</span>checked<span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="nb">source</span><span class="w"> </span>file<span class="o">)</span>
</code></pre></div>

<p>The solution is to use <code>typing.Type</code>:</p>
<div class="codehilite"><pre><span></span><code><span class="c1"># code.py</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Type</span>


<span class="k">class</span> <span class="nc">MyException</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">custom_exception</span><span class="p">:</span> <span class="n">Type</span><span class="p">[</span><span class="ne">Exception</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">custom_exception</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;error)</span>

<span class="n">myfunc</span><span class="p">(</span><span class="n">MyException</span><span class="p">)</span>
</code></pre></div>]]></content>
    <link href="til-2024-06-passing-exceptions-as-arguments-in-python"/>
    <summary>Mypy needs an extra identifier to not choke on an exception passed as an argument.</summary>
    <category term="TIL"/>
    <contributor>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </contributor>
    <published>2024-06-07T11:13:05.553336+00:00</published>
  </entry>
  <entry>
    <id>2024-06-london-hackathon-on-july-1-and-2</id>
    <title>London Tech Zero Hackathon on July 1 and 2!</title>
    <updated>2024-08-04T21:38:06.001056+00:00</updated>
    <author>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </author>
    <content type="CDATA"><![CDATA[<p><em>On the 1st and 2nd of July is the first-ever <a href="https://octopus.typeform.com/hackTZ-interest">London Tech Zero Hackathon</a>, supported by Kraken Tech.</em></p>
<p>Taking place in the <a href="https://thevinylfactory.com/venue/">Vinyl Factory in Soho</a>, for two days developers, designers, and others will hack out MVPs of solutions to resolve real-life sustainability and climate problems. APIs and guidance will be provided, and contestants can build out software or hardware solutions. Individuals are welcome to attend and companies are invited to send teams. There will be prizes besides bragging rights - including a £20k mini grant to develop the winning idea.</p>
<p><em>I'll be there to help! As an employee of the hosts, I can't build your projects for you but I can provide assistance. :-)</em></p>
<p>The event will provide:</p>
<ul>
<li>APIs</li>
<li><a href="https://thevinylfactory.com/venue/">Venue</a></li>
<li>Food and drink</li>
<li>Fast internet and power</li>
<li>Changes to network and socialize</li>
<li>Speech by <a href="https://www.linkedin.com/in/gregsjackson/">Greg</a> <a href="https://en.wikipedia.org/wiki/Greg_Jackson_(businessman)">Jackson</a>, CEO of Octopus Energy</li>
<li>Lots of prizes, first place is a £20K grant to help build out your project</li>
</ul>
<p>Contests provide:</p>
<ul>
<li>Skills</li>
<li>Enthusiasm</li>
<li>Laptop and other hardware</li>
</ul>
<p>Schedule:</p>
<ul>
<li>July 1: Event begins at 10am, venue closes at 10pm</li>
<li>July 2: Judging at 3pm</li>
</ul>
<p><img alt="London Tech Zero Hackathon" src="/public/images/tech-zero-hackathon-square.png" /></p>]]></content>
    <link href="2024-06-london-hackathon-on-july-1-and-2"/>
    <summary>On the 1st and 2nd of July is the first-ever London Tech Zero Hackathon, supported by Kraken Tech.</summary>
    <category term="python"/>
    <category term="django"/>
    <category term="hackathon"/>
    <category term="kraken"/>
    <contributor>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </contributor>
    <published>2024-06-24T14:28:10.494486+00:00</published>
  </entry>
</feed>
