<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://daniel.feldroy.com</id>
  <title>Inside the head of Daniel Roy Greenfeld</title>
  <updated>2024-09-18T15:24:27.914568+00:00</updated>
  <author>
    <name>Daniel Roy Greenfeld</name>
    <email>daniel@feldroy.com</email>
    <uri>https://daniel.feldroy.com</uri>
  </author>
  <link href="https://daniel.feldroy.com" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <logo>https://daniel.feldroy.com/images/pydanny-cartwheel.png</logo>
  <rights>All rights reserved 2024, Daniel Roy Greenfeld</rights>
  <entry>
    <id>https://daniel.feldroy.com/posts/til-2024-08-parsing-messy-datetimes-strings</id>
    <title>TIL: Parsing messy datetimes strings</title>
    <updated>2024-09-18T15:24:28.643944+00:00</updated>
    <author>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </author>
    <content type="CDATA"><![CDATA[<p><em>How to convert inconsistent datetime strings into datetime objects.</em></p>
<p>Recently I've been working on yet another rewrite of my blog, this time to <a href="https://about.fastht.ml/">FastHTML</a>. Thanks to the power and ease of that framework, that took about 45 minutes to replicate all the web pages of my blog. Wahoo!</p>
<p>Alas, the atom/rss feeds took quite a bit longer. </p>
<p>For the atom/rss feeds I chose to use the venerable <a href="https://pypi.org/project/feedgen/">Feedgen</a> library. The challenge there is that Feedgen is rightfully particular about the datetime objects it accepts. And over the years as this site has had 650 posts added the timestamps have become rather inconsistent in their format. On that issue I fully blame the author, who unfortunately is me.</p>
<p>In any case, I wrote a little Python function that handles it in a timezone aware way using the <code>dateutils.parser()</code> functon that I learned.</p>
<div class="codehilite"><pre><span></span><code><span class="c1"># Python stdlib</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="nn">dateutils</span> <span class="kn">import</span> <span class="n">parser</span>

<span class="c1"># You&#39;ll need to install the pytz dependency</span>
<span class="kn">import</span> <span class="nn">pytz</span>

<span class="k">def</span> <span class="nf">convert_dtstr_to_dt</span><span class="p">(</span><span class="n">date_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">datetime</span><span class="p">:</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Convert a naive or non-naive date/datetime string</span>
<span class="sd">    to a datetime object. Naive datetime strings are</span>
<span class="sd">    assumed to be in GMT (UTC) timezone.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">dt</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">date_str</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">dt</span><span class="o">.</span><span class="n">tzinfo</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="c1"># If the datetime object is naive, set it to GMT (UTC)</span>
            <span class="n">dt</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">tzinfo</span><span class="o">=</span><span class="n">pytz</span><span class="o">.</span><span class="n">UTC</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">dt</span>
    <span class="k">except</span> <span class="p">(</span><span class="ne">ValueError</span><span class="p">,</span> <span class="ne">TypeError</span><span class="p">)</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">Raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Error parsing date string: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</code></pre></div>

<p>Original source code <a href="https://github.com/pydanny/daniel-blog-fasthtml/blob/da9500d0c4af9876c267fdd447f4656796516163/components.py#L12-L31">here</a>.</p>]]></content>
    <link href="https://daniel.feldroy.com/posts/til-2024-08-parsing-messy-datetimes-strings"/>
    <summary>How to convert inconsistent datetime strings into datetime objects.</summary>
    <category term="TIL"/>
    <category term="howto"/>
    <category term="python"/>
    <category term="FastHTML"/>
    <contributor>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </contributor>
    <published>2024-08-06T12:00:00.192810+00:00</published>
  </entry>
  <entry>
    <id>https://daniel.feldroy.com/posts/2024-09-tmux-cheatsheet</id>
    <title>tmux cheatsheet</title>
    <updated>2024-09-18T15:24:28.636914+00:00</updated>
    <author>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </author>
    <content type="CDATA"><![CDATA[<p><em>My list of tmux commands with minimal flavor text.</em></p>
<p>The tmux terminal utility allows for splitting terminal into multiple window panes. The splits can be vertical or horizontal. Installation instructions are <a href="https://github.com/tmux/tmux/wiki/Installing">here</a>.</p>
<h2 id="creating-a-new-tmux-session">Creating a new tmux session</h2>
<div class="codehilite"><pre><span></span><code>tmux<span class="w"> </span>new<span class="w"> </span>-s<span class="w"> </span>SessionName
</code></pre></div>

<h2 id="creating-new-panes">Creating new panes</h2>
<p>Horizontal panes</p>
<p><code>Ctrl+B "</code> </p>
<p>Vertical panes</p>
<p><code>Ctrl+B %</code></p>
<h2 id="scrolling">Scrolling</h2>
<p><code>Ctrl+B [</code></p>
<p>Then use arrow keys or pageup and pagedown. Press <code>q</code> to quit.</p>
<h2 id="moving-between-panes">Moving between panes</h2>
<p><code>Ctrl+B</code> plus arrow keys</p>
<h2 id="closing-the-current-pane">Closing the current pane</h2>
<p><code>Ctrl+b+x</code></p>
<h2 id="killing-the-current-session">Killing the current session</h2>
<p>Sometimes you want to end the current session.</p>
<p><code>Ctrl+b</code></p>
<p><code>:kill-session</code></p>
<h2 id="not-yet-finished">Not yet finished</h2>
<p>More to come!</p>
<p><img alt="" src="/public/images/tmux-logo-medium.png" /></p>]]></content>
    <link href="https://daniel.feldroy.com/posts/2024-09-tmux-cheatsheet"/>
    <summary>My list of tmux commands with minimal flavor text.</summary>
    <category term="cheatsheet"/>
    <category term="howto"/>
    <contributor>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </contributor>
    <published>2024-09-03T08:33:14.926680+00:00</published>
  </entry>
  <entry>
    <id>https://daniel.feldroy.com/posts/course-fastai-lesson-00</id>
    <title>Practical Deep Learning for Coders: Lesson 0</title>
    <updated>2024-09-18T15:24:28.596125+00:00</updated>
    <author>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </author>
    <content type="CDATA"><![CDATA[<p>I'm going through the <a href="http://course.fast.ai">Practical Deep Learning for Coders</a> course by Jeremy Howard. I’ll be sharing notes here on my site, all tagged with <a href="https://daniel.feldroy.com/tags/fast.ai">fast.ai</a>.</p>
<h2 id="about-lesson-0">About Lesson 0</h2>
<p>This lesson is where <a href="https://en.wikipedia.org/wiki/Jeremy_Howard_(entrepreneur)">Jeremy Howard</a> explains how to get the most out of his classes. He references <a href="https://rosmulski.gumroad.com/l/learn_machine_learning/blog">Meta-learning</a> by <a href="https://radekosmulski.com/">Radek Osmulski</a> frequently.</p>
<h2 id="how-to-take-lessons">How to take lessons</h2>
<p>Follow these steps with each lesson of the <a href="http://course.fast.ai">Practical Deep Learning for Coders</a> course:</p>
<ol>
<li><strong>Watch lecture</strong></li>
<li><strong>Run notebook &amp; experiment with the results</strong></li>
<li>Play with it. Do different things  </li>
<li><strong>Reproduce results</strong></li>
<li>Reproduce from scratch. With a fresh new notebook, can I recreate some of the models?  </li>
<li><strong>Repeat with a different dataset</strong></li>
<li>Get own dataset and try it from scratch</li>
</ol>
<p>Some people go through each lesson 2-3 times. It might be hard to do it the first time. That’s okay.</p>
<p>Once you think you understand a lesson, go through the <code>clean/</code> version of the notebooks and figure out each cell again, this time without prose or rendered outputs.</p>
<p>After that, complete the questionnaire. Use the questions to confirm you know every concept. If you can't answer a question, go back and learn it. </p>
<p>When a lesson is 100% complete and you actually understand everyting, go to <a href="https://forums.fast.ai/">forums.fast.ai</a> and announce your efforts in the "share your work" section.</p>
<h2 id="tips-and-tricks">Tips and Tricks</h2>
<p>These are from Jeremy Howard and Radek Osmulski.</p>
<ul>
<li><strong>The math in Deep Learning is matrix multiplication</strong>. Where you multiply things together, then add them up.   </li>
<li><strong>To get better at ML, like anything else: Practice!</strong> Theory requires practice, practice provides context for understanding theory. So practice early and practice often. A few years ago I wrote about this concept <a href="https://daniel.feldroy.com/posts/code-code-code">here</a></li>
<li><strong>The difference between machine learning code compared to other coding is we can generalize.</strong> We can learn how to measure how well our code generalizes. This is in stark contrast to other types of coding where you are generally looking for very specific results.  </li>
<li><strong>Proving ML code is accurate is really hard.</strong> Jeremy assumes every line of ML code he writes is going to be wrong. Unlike web dev it is harder to determine if code is wrong. Make sure you have a strong baseline so it’s easy to check your work  </li>
<li><strong>Competing in Kaggle, regardless of place, can be a great way to validate ML skills.</strong> Even if you come in last place, you have to go through all the process of doing work as a ML engineer. Well, maybe not deployment, but everything early.  </li>
<li><strong>Best path for winning at <a href="https://www.kaggle.com/">Kaggle</a>:</strong>  </li>
<li>Start a competition early  </li>
<li>Read forums every day  </li>
<li>Make improvements to your competition set each day, this iterative process will serve as practice. <a href="https://daniel.feldroy.com/posts/code-code-code">Code, code, code</a>!</li>
<li>Rinse and repeat: Early losses will serve as practice for when you are able to try to win  </li>
<li><strong>Document process of learning in blogs, videos, and social media.</strong> Just like any skill, including other types of coding, sets up the public footprint that you are skilled in your craft. So when people look you up, they identify you with your skills.</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=gGxe2mN3kAg&amp;ab_channel=JeremyHoward">Video lecture</a> - Where these notes are taken from</li>
<li><a href="http://course.fast.ai">course.fast.ai</a> - Lessons 1 onward</li>
<li><a href="https://rosmulski.gumroad.com/l/learn_machine_learning/blog">Book: "Meta-learning" by Radek Osmulski</a>  </li>
<li><a href="https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527?tag=mlinar-20">Book: "Deep Learning for Coders with fastai and PyTorch" by Jeremy Howard and Sylvain Gugger</a></li>
</ul>
<h2 id="summary-takeaway">Summary / Takeaway</h2>
<p>My methodology for learning and teaching is similar, but Jeremy's approach focuses much more on repetition and questioning:</p>
<ol>
<li>After you see a demo, you try it out yourself. </li>
<li>You experiment, then you start from scratch and try to implement that yourself as well. </li>
<li>You go over the lesson again, this time with only titles and code examples. </li>
<li>Finally, you use the questionnaire to confirm if you missed a topic.</li>
</ol>
<p>Classes I've constructed are different. They focus on repetition, but not on different versions of the lesson. Also they don't cover experimentation and play starting with lesson 1. That typically happens far into the class. </p>
<p>What I find interesting is that Jeremy's approach closely matches how any decent martial art class with sparring works (Muay Thai, BJJ, fencing, kendo, HEMA, Tae Kwon Do, etc.). Typically in a class you'll learn or polish 1-2 moves, then be given specific drills to use to practice them. Then finally you might have free sparring, where if you can land the move(s) of the class it feels awesome.</p>
<p>I'm excited to dig into <a href="https://course.fast.ai/Lessons/lesson1.html">lesson 1</a>!</p>]]></content>
    <link href="https://daniel.feldroy.com/posts/course-fastai-lesson-00"/>
    <summary>I'm going through the fast.ai course by Jeremy Howard. This is the course notes for lesson 0.</summary>
    <category term="python"/>
    <category term="fast.ai"/>
    <category term="courses"/>
    <contributor>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </contributor>
    <published>2024-09-18T16:30:00.926680+00:00</published>
  </entry>
</feed>
