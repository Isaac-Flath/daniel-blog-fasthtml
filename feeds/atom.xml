<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://daniel.feldroy.com</id>
  <title>Inside the head of Daniel Roy Greenfeld</title>
  <updated>2024-09-03T09:12:53.878816+00:00</updated>
  <author>
    <name>Daniel Roy Greenfeld</name>
    <email>daniel@feldroy.com</email>
    <uri>https://daniel.feldroy.com</uri>
  </author>
  <link href="https://daniel.feldroy.com" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <logo>https://daniel.feldroy.com/images/pydanny-cartwheel.png</logo>
  <rights>All rights reserved 2024, Daniel Roy Greenfeld</rights>
  <entry>
    <id>2024-06-london-hackathon-on-july-1-and-2</id>
    <title>London Tech Zero Hackathon on July 1 and 2!</title>
    <updated>2024-09-03T09:12:54.455266+00:00</updated>
    <author>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </author>
    <content type="CDATA"><![CDATA[<p><em>On the 1st and 2nd of July is the first-ever <a href="https://octopus.typeform.com/hackTZ-interest">London Tech Zero Hackathon</a>, supported by Kraken Tech.</em></p>
<p>Taking place in the <a href="https://thevinylfactory.com/venue/">Vinyl Factory in Soho</a>, for two days developers, designers, and others will hack out MVPs of solutions to resolve real-life sustainability and climate problems. APIs and guidance will be provided, and contestants can build out software or hardware solutions. Individuals are welcome to attend and companies are invited to send teams. There will be prizes besides bragging rights - including a £20k mini grant to develop the winning idea.</p>
<p><em>I'll be there to help! As an employee of the hosts, I can't build your projects for you but I can provide assistance. :-)</em></p>
<p>The event will provide:</p>
<ul>
<li>APIs</li>
<li><a href="https://thevinylfactory.com/venue/">Venue</a></li>
<li>Food and drink</li>
<li>Fast internet and power</li>
<li>Changes to network and socialize</li>
<li>Speech by <a href="https://www.linkedin.com/in/gregsjackson/">Greg</a> <a href="https://en.wikipedia.org/wiki/Greg_Jackson_(businessman)">Jackson</a>, CEO of Octopus Energy</li>
<li>Lots of prizes, first place is a £20K grant to help build out your project</li>
</ul>
<p>Contests provide:</p>
<ul>
<li>Skills</li>
<li>Enthusiasm</li>
<li>Laptop and other hardware</li>
</ul>
<p>Schedule:</p>
<ul>
<li>July 1: Event begins at 10am, venue closes at 10pm</li>
<li>July 2: Judging at 3pm</li>
</ul>
<p><img alt="London Tech Zero Hackathon" src="/public/images/tech-zero-hackathon-square.png" /></p>]]></content>
    <link href="2024-06-london-hackathon-on-july-1-and-2"/>
    <summary>On the 1st and 2nd of July is the first-ever London Tech Zero Hackathon, supported by Kraken Tech.</summary>
    <category term="python"/>
    <category term="django"/>
    <category term="hackathon"/>
    <category term="kraken"/>
    <contributor>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </contributor>
    <published>2024-06-24T14:28:10.494486+00:00</published>
  </entry>
  <entry>
    <id>til-2024-08-parsing-messy-datetimes-strings</id>
    <title>TIL: Parsing messy datetimes strings</title>
    <updated>2024-09-03T09:12:54.438068+00:00</updated>
    <author>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </author>
    <content type="CDATA"><![CDATA[<p><em>How to convert inconsistent datetime strings into datetime objects.</em></p>
<p>Recently I've been working on yet another rewrite of my blog, this time to <a href="https://about.fastht.ml/">FastHTML</a>. Thanks to the power and ease of that framework, that took about 45 minutes to replicate all the web pages of my blog. Wahoo!</p>
<p>Alas, the atom/rss feeds took quite a bit longer. </p>
<p>For the atom/rss feeds I chose to use the venerable <a href="https://pypi.org/project/feedgen/">Feedgen</a> library. The challenge there is that Feedgen is rightfully particular about the datetime objects it accepts. And over the years as this site has had 650 posts added the timestamps have become rather inconsistent in their format. On that issue I fully blame the author, who unfortunately is me.</p>
<p>In any case, I wrote a little Python function that handles it in a timezone aware way using the <code>dateutils.parser()</code> functon that I learned.</p>
<div class="codehilite"><pre><span></span><code><span class="c1"># Python stdlib</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="nn">dateutils</span> <span class="kn">import</span> <span class="n">parser</span>

<span class="c1"># You&#39;ll need to install the pytz dependency</span>
<span class="kn">import</span> <span class="nn">pytz</span>

<span class="k">def</span> <span class="nf">convert_dtstr_to_dt</span><span class="p">(</span><span class="n">date_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">datetime</span><span class="p">:</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Convert a naive or non-naive date/datetime string</span>
<span class="sd">    to a datetime object. Naive datetime strings are</span>
<span class="sd">    assumed to be in GMT (UTC) timezone.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">dt</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">date_str</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">dt</span><span class="o">.</span><span class="n">tzinfo</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="c1"># If the datetime object is naive, set it to GMT (UTC)</span>
            <span class="n">dt</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">tzinfo</span><span class="o">=</span><span class="n">pytz</span><span class="o">.</span><span class="n">UTC</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">dt</span>
    <span class="k">except</span> <span class="p">(</span><span class="ne">ValueError</span><span class="p">,</span> <span class="ne">TypeError</span><span class="p">)</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">Raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Error parsing date string: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</code></pre></div>

<p>Original source code <a href="https://github.com/pydanny/daniel-blog-fasthtml/blob/da9500d0c4af9876c267fdd447f4656796516163/components.py#L12-L31">here</a>.</p>]]></content>
    <link href="til-2024-08-parsing-messy-datetimes-strings"/>
    <summary>How to convert inconsistent datetime strings into datetime objects.</summary>
    <category term="TIL"/>
    <category term="howto"/>
    <category term="python"/>
    <category term="FastHTML"/>
    <contributor>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </contributor>
    <published>2024-08-06T12:00:00.192810+00:00</published>
  </entry>
  <entry>
    <id>2024-09-tmux-cheatsheet</id>
    <title>tmux cheatsheet</title>
    <updated>2024-09-03T09:12:54.389851+00:00</updated>
    <author>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </author>
    <content type="CDATA"><![CDATA[<p><em>My list of tmux commands with minimal flavor text.</em></p>
<p>The tmux terminal utility allows for splitting terminal into multiple window panes. The splits can be vertical or horizontal. Installation instructions are <a href="https://github.com/tmux/tmux/wiki/Installing">here</a>.</p>
<h2 id="creating-a-new-tmux-session">Creating a new tmux session</h2>
<div class="codehilite"><pre><span></span><code>tmux<span class="w"> </span>new<span class="w"> </span>-s<span class="w"> </span>SessionName
</code></pre></div>

<h2 id="creating-new-panes">Creating new panes</h2>
<p>Horizontal panes</p>
<p><code>Ctrl+B "</code></p>
<p>Vertical panes</p>
<p><code>Ctrl+B %</code></p>
<h2 id="scrolling">Scrolling</h2>
<p><code>Ctrl+B [</code></p>
<p>Then use arrow keys or pageup and pagedown. Press <code>q</code> to quit.</p>
<h2 id="moving-between-panes">Moving between panes</h2>
<p><code>Ctrl+B</code> plus arrow keys</p>
<h2 id="closing-the-current-pane">Closing the current pane</h2>
<p><code>Ctrl+b+x</code></p>
<h2 id="_1"></h2>
<p>More to come as I </p>
<p><img alt="" src="/public/images/tmux-logo-medium.png" /></p>]]></content>
    <link href="2024-09-tmux-cheatsheet"/>
    <summary>My list of tmux commands with minimal flavor text.</summary>
    <category term="cheatsheet"/>
    <category term="howto"/>
    <contributor>
      <name>Daniel Roy Greenfeld</name>
      <email>daniel@feldroy.com</email>
    </contributor>
    <published>2024-09-03T08:33:14.926680+00:00</published>
  </entry>
</feed>
